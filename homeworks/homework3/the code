const int pinA = 12;
const int pinB = 8;
const int pinC = 5;
const int pinD = 3;
const int pinE = 2;
const int pinF = 11;
const int pinG = 6;
const int pinDP = 4;
const int pinD1 = 7;
const int pinD2 = 9;
const int pinD3 = 10;
const int pinD4 = 13;
const int segSize = 8;
const int noOfDisplays = 4;
const int noOfDigits = 10;
int dpState = LOW;
int segments[segSize] = {pinA, pinB, pinC, pinD, pinE, pinF, pinG, pinDP};
int digits[noOfDisplays] = {pinD1, pinD2, pinD3, pinD4};
byte digitMatrix[noOfDigits][segSize - 1] = {
  // a  b  c  d  e  f  g
  {1, 1, 1, 1, 1, 1, 0}, // 0
  {0, 1, 1, 0, 0, 0, 0}, // 1
  {1, 1, 0, 1, 1, 0, 1}, // 2
  {1, 1, 1, 1, 0, 0, 1}, // 3
  {0, 1, 1, 0, 0, 1, 1}, // 4
  {1, 0, 1, 1, 0, 1, 1}, // 5
  {1, 0, 1, 1, 1, 1, 1}, // 6
  {1, 1, 1, 0, 0, 0, 0}, // 7
  {1, 1, 1, 1, 1, 1, 1}, // 8
  {1, 1, 1, 1, 0, 1, 1}  // 9
};
int digitPosition = 0;
int outputDigit[noOfDigits] = {1, 0, 0, 0};

const int PinSW = A0;
const int PinX = A2;
const int PinY = A1;
int switchValue = 0;
int xValue = 0;
int yValue = 0;
int swState = 0;
int lastSwState = 0;
int swValue = 0;
bool joyMovedX = false;
bool joyMovedY = false;
int minThreshold = 400;
int maxThreshold = 600;
bool locked = false;

void displayNumber(byte digit, byte decimalPoint) {
  for (int i = 0; i < segSize - 1; i++) {
    digitalWrite(segments[i], digitMatrix[digit][i]);
  }
  digitalWrite(segments[segSize - 1], decimalPoint);
}
void showDigit(int num) {
  for (int i = 0; i < noOfDisplays; i++) {
    digitalWrite(digits[i], HIGH);
  }
  digitalWrite(digits[num], LOW);
}

void setup() {
  for (int i = 0; i < segSize; i++)
  {
    pinMode(segments[i], OUTPUT);
  }
  for (int i = 0; i < noOfDisplays; i++)
  {
    pinMode(digits[i], OUTPUT);
  }
  displayNumber(digitPosition, dpState);
  pinMode(PinSW, INPUT_PULLUP);
  Serial.begin(9600);
}
void loop() {
  xValue = analogRead(PinX);
  swState = digitalRead(PinSW);
  for (int i = 0; i < noOfDisplays; i++)
  {
    showDigit(i);
    if (3 - i == digitPosition)
      displayNumber(outputDigit[3 - i], !dpState);
    else
     displayNumber(outputDigit[3 - i], dpState);
  delay(6);
  }
  if (swState != lastSwState && swState == LOW)
    locked = !locked;
  lastSwState = swState;
  if (xValue < minThreshold && joyMovedX == false && locked == false)
  {
    if (digitPosition == 0)
      digitPosition = 3;
    else
      digitPosition--;
    joyMovedX = true;
  }
  if (xValue > maxThreshold && joyMovedX == false && locked == false)
  {
    if (digitPosition == 3)
      digitPosition = 0;
    else
      digitPosition++;
    joyMovedX = true;
  }
  if (xValue < maxThreshold && xValue > minThreshold)
  { joyMovedX = false;
    for (int i = 0; i < noOfDisplays; i++)
      digitalWrite(digits[i], LOW);
  }
  if (locked == true)
  {
    yValue = analogRead(PinY);
    if (yValue < minThreshold && joyMovedY == false)
    {
      //  Serial.println(yValue);
      if (outputDigit[digitPosition] > 0)
        outputDigit[digitPosition]--;
      else
        outputDigit[digitPosition] = 9;
      joyMovedY = true;
    }
    if (yValue > maxThreshold && joyMovedY == false)
    {
      //  Serial.println(yValue);
      if (outputDigit[digitPosition] < 9)
        outputDigit[digitPosition]++;
      else
        outputDigit[digitPosition] = 0;
      joyMovedY = true;
    }
    if (yValue < maxThreshold && yValue > minThreshold)
   joyMovedY = false;
  }
}
