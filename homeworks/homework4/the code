#include <LiquidCrystal.h>
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);
const int PinX = A0;
const int PinY = A1;
const int PinSW = A2;
int switchValue = 0;
int xValue = 0;
int yValue = 0;
int swState = 0;
int lastSwState = 0;
int swValue = 0;
bool joyMovedX = false;
bool joyMovedY = false;
int minThreshold = 400;
int maxThreshold = 600;
bool locked = false;
int lives = 3;
int level = 0;
int startingLevel = 0;
int highscore = 0;
int mainMenu = 1;
int menuOption = 1;
int previousMillis = 0;
int currentMillis = 0;
int losingMillis = 0;
void setup() {
  lcd.begin(16, 2);
  lcd.print("Main menu");
  lcd.setCursor(0, 1);
  lcd.print(">Play  High  Sett");

  pinMode(PinSW, INPUT_PULLUP);
  Serial.begin(9600);
}
void printMain()
{ lcd.clear();
  lcd.print("Main menu");
  lcd.setCursor(0, 1);
  lcd.print(">Play  High  Sett");
}
void printMainH()
{ lcd.clear();
  lcd.print("Main menu");
  lcd.setCursor(0, 1);
  lcd.print(" Play >High  Sett");
}
void printMainS()
{ lcd.clear();
  lcd.print("Main menu");
  lcd.setCursor(0, 1);
  lcd.print(" Play  High >Set");
}
void printOne()
{ lcd.clear();
  lcd.print("Lives:");
  lcd.print(lives);
  lcd.print(" Lvl:");
  lcd.print(level);
  lcd.setCursor(0, 1);
  lcd.print("Score: ");
  lcd.print(level * 3);
  if (level * 3 > highscore)
    highscore = level * 3;
}
void printTwo()
{ lcd.clear();
  lcd.print("Highscore");
  lcd.setCursor(0, 1);
  lcd.print(highscore);
}
void printThree()
{ lcd.clear();
  lcd.print("Settings");
  lcd.setCursor(0, 1);
  lcd.print("Start level: ");
  lcd.print(startingLevel);
}
void loop() {
  currentMillis = millis();
  Serial.println(menuOption);

  xValue = analogRead(PinX);
  swState = digitalRead(PinSW);
  yValue = analogRead(PinY);

  if (mainMenu == 0)
  {
    if (menuOption == 1)
    {
      if (currentMillis - losingMillis > 20000)
      { lcd.clear();
        lcd.print("You win!!!!");
        level = startingLevel;
        delay(3000);
        lives = 3;
        mainMenu = 1;
        printMain();
      }
      if (currentMillis - previousMillis > 2000 && currentMillis - losingMillis < 20000)
      {
        level++;
        previousMillis = currentMillis;
        lcd.clear();
        printOne();
      }
    }
    if (swState != lastSwState && swState == LOW)
    {
      if (menuOption == 1)
      { lives--;
        lcd.clear();
        if (lives == 0)
        { lcd.print("You lost :(");
          level = startingLevel;
          delay(3000);
          lives = 3;
          mainMenu = 1;
          printMain();
        }
        else
          printOne();
      }
      else if (menuOption == 2 || menuOption == 3)
      { mainMenu = 1;
        if (menuOption == 1)
          printMain();
        if (menuOption == 2)
          printMainH();
        if (menuOption == 3)
          printMainS();
      }
    }
    lastSwState = swState;
    if (xValue > maxThreshold && joyMovedX == false && menuOption == 3)
    {
      startingLevel++;
      printThree();
      joyMovedX = true;
      level = startingLevel;
    }
    if (xValue < minThreshold && joyMovedX == false && menuOption == 3)
    {
      if (startingLevel > 0)
        startingLevel--;
      printThree();
      joyMovedX = true;
      level = startingLevel;
    }
  }
  if (mainMenu == 1)
  {
    if (yValue < minThreshold && joyMovedY == false)
    { if (menuOption > 1)
        menuOption--;
      if (menuOption == 1)
        printMain();
      else
        printMainH();
      joyMovedY = true;
    }
    if (yValue > maxThreshold && joyMovedY == false)
    { if (menuOption < 3)
        menuOption++;
      if (menuOption == 3)
        printMainS();
      else
        printMainH();
      joyMovedY = true;
    }
    if (swState != lastSwState && swState == LOW)
    {
      mainMenu = 0;
      if (menuOption == 1)
      {
        printOne();
        previousMillis = currentMillis;
        losingMillis = currentMillis;
      }
      if (menuOption == 2)
        printTwo();
      if (menuOption == 3)
        printThree();
    }
  }
  if (xValue < maxThreshold && xValue > minThreshold)
    joyMovedX = false;
  if (yValue < maxThreshold && yValue > minThreshold)
    joyMovedY = false;
  lastSwState = swState;
}
